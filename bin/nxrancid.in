#! @PERLV_PATH@
##
## $Id: nxrancid.in 2321 2011-07-29 20:40:40Z heas $
##
## @PACKAGE@ @VERSION@
## Copyright (c) @COPYYEARS@ by Terrapin Communications, Inc.
## All rights reserved.
##
## This code is derived from software contributed to and maintained by
## Terrapin Communications, Inc. by Henry Kilmer, John Heasley, Andrew Partan,
## Pete Whiting, Austin Schutz, and Andrew Fort.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in the
##    documentation and/or other materials provided with the distribution.
## 3. All advertising materials mentioning features or use of this software
##    must display the following acknowledgement:
##        This product includes software developed by Terrapin Communications,
##        Inc. and its contributors for RANCID.
## 4. Neither the name of Terrapin Communications, Inc. nor the names of its
##    contributors may be used to endorse or promote products derived from
##    this software without specific prior written permission.
## 5. It is requested that non-binding fixes and modifications be contributed
##    back to Terrapin Communications, Inc.
##
## THIS SOFTWARE IS PROVIDED BY Terrapin Communications, INC. AND CONTRIBUTORS
## ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
## TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COMPANY OR CONTRIBUTORS
## BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
# usage: rancid [-dV] [-l] [-f filename | hostname]
#
use Getopt::Std;
getopts('dflV');
if ($opt_V) {
    print "@PACKAGE@ @VERSION@\n";
    exit(0);
}
$log = $opt_l;
$debug = $opt_d;
$file = $opt_f;
$host = $ARGV[0];
$clean_run = 0;
$found_end = 0;
$timeo = 90;                # clogin timeout in seconds
$DO_SHOW_VLAN = 1;

my(@commandtable, %commands, @commands);# command lists
my($aclsort) = ("ipsort");      # ACL sorting mode
my($filter_commstr);            # SNMP community string filtering
my($filter_pwds);           # password filtering mode

# This routine is used to print out the router configuration
sub ProcessHistory {
    my($new_hist_tag,$new_command,$command_string,@string) = (@_);
    if ((($new_hist_tag ne $hist_tag) || ($new_command ne $command))
    && scalar(%history)) {
    print eval "$command \%history";
    undef %history;
    }
    if (($new_hist_tag) && ($new_command) && ($command_string)) {
    if ($history{$command_string}) {
        $history{$command_string} = "$history{$command_string}@string";
    } else {
        $history{$command_string} = "@string";
    }
    } elsif (($new_hist_tag) && ($new_command)) {
    $history{++$#history} = "@string";
    } else {
    print "@string";
    }
    $hist_tag = $new_hist_tag;
    $command = $new_command;
    1;
}

sub numerically { $a <=> $b; }

# This is a sort routine that will sort numerically on the
# keys of a hash as if it were a normal array.
sub keynsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort numerically keys(%lines)) {
    $sorted_lines[$i] = $lines{$key};
    $i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# keys of a hash as if it were a normal array.
sub keysort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort keys(%lines)) {
    $sorted_lines[$i] = $lines{$key};
    $i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# values of a hash as if it were a normal array.
sub valsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort values %lines) {
    $sorted_lines[$i] = $key;
    $i++;
    }
    @sorted_lines;
}

# This is a numerical sort routine (ascending).
sub numsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $num (sort {$a <=> $b} keys %lines) {
    $sorted_lines[$i] = $lines{$num};
    $i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# ip address when the ip address is anywhere in
# the strings.
sub ipsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $addr (sort sortbyipaddr keys %lines) {
    $sorted_lines[$i] = $lines{$addr};
    $i++;
    }
    @sorted_lines;
}

# These two routines will sort based upon IP addresses
sub ipaddrval {
    my(@a) = ($_[0] =~ m#^(\d+)\.(\d+)\.(\d+)\.(\d+)$#);
    $a[3] + 256 * ($a[2] + 256 * ($a[1] +256 * $a[0]));
}
sub sortbyipaddr {
    &ipaddrval($a) <=> &ipaddrval($b);
}

# This routine parses "show version"
sub ShowVersion {
    print STDERR "    In ShowVersion: $_" if ($debug);

    while (<INPUT>) {
    tr/\015//d;
    last if (/^$prompt/);
    next if (/^(\s*|\s*$cmd\s*)$/);
    return(1) if /Line has invalid autocommand /;
    return(1) if /(Invalid input detected|Type help or )/;
    return(-1) if (/\% Invalid command at /);
    return(-1) if (/No token match at /);   # 1000v
    return(-1) if (/\% Permission denied/);
    return(-1) if (/command authorization failed/i);

    if (/^Cisco Nexus Operating System/) { $type = "NXOS";}
    if (/^Software$/) {
        while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^\s*$cmd\s*$/);

        if (/^$/) {
            goto EndSoftware;
        }
        /\s*([^:]*:)\s*(.*)$/ &&
            ProcessHistory("COMMENTS","keysort","C1",
                   "!Software: $1 $2\n") && next;
        }
    }
EndSoftware:
    if (/^Hardware$/) {
        while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^\s*$cmd\s*$/);

        if (/^\s*cisco (Nexus[ \d]+) /) {
            # cisco Nexus7000 C7010 (10 Slot) Chassis ("Supervisor module-1X")
            # cisco Nexus7000 C7018 (18 Slot) Chassis ("Supervisor module-1X")
            # cisco Nexus5548 Chassis ("O2 32X10GE/Modular Supervisor")
            # cisco Nexus 4000 Chassis ("20x10GE/supervisor")
            $proc = $1;
        }

        if (/^$/) {
            goto EndHardware;
        }
        if (/^\s*(.*) CPU\s*with (\d*) kB(.*)$/) {
            my($tmp) = int($2 / 1024);
            ProcessHistory("COMMENTS","keysort","A2",
                   "!Hardware: $1 CPU with $tmp MB$3\n");
            next;
        }
        if (/^\s*(.*)\s*with (\d*) kB(.*)$/) {
            my($tmp) = int($2 / 1024);
            ProcessHistory("COMMENTS","keysort","A2",
                   "!Hardware: $1with $tmp MB$3\n");
            next;
        }
        /^\s*(.*)$/ &&
            ProcessHistory("COMMENTS","keysort","A2",
                   "!Hardware: $1\n") && next;
        }
    }
EndHardware:
    if (/^\s+(bootflash|slot0):\s+(\d+) kB(.*)$/) {
        my($tmp) = int($2 / 1024);
        ProcessHistory("COMMENTS","keysort","B1",
               "!Memory: $1: $tmp MB$3\n");
        next;
    }

    }

    print STDERR "TYPE = $type\n" if ($debug);
    ProcessHistory("COMMENTS","keysort","A1", "!Chassis type: $proc - a $type router\n");
    ProcessHistory("COMMENTS","keysort","B0", "!\n");
    ProcessHistory("COMMENTS","keysort","C0", "!\n");
    ProcessHistory("COMMENTS","","", "!\n");
    return(0);
}

# This routine parses "show version build-info"
sub ShowVersionBuild {
    print STDERR "    In ShowVersionBuild: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        /^Built By / && ProcessHistory("COMMENTS","","", "!Build: $_");
        /^On Date / && ProcessHistory("COMMENTS","","", "!Build: $_");
        /^From Tree / && ProcessHistory("COMMENTS","","", "!Build: $_");
        /^Base Tag / && ProcessHistory("COMMENTS","","", "!Build: $_");
        /^Release for / && ProcessHistory("COMMENTS","","", "!Build: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show license *"
sub ShowLicense {
    print STDERR "    In ShowLicense: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        /^-+$/ && next;     # Skip lines of all dashes.
        s/ Grace .+$/ Grace/;   # Drop anything after Grace.
        ProcessHistory("COMMENTS","","", "!LIC: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show system redundancy status"
sub ShowRedundancy {
    print STDERR "    In ShowRedundancy: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        s/ +$//;    # Drop trailing ' '
        ProcessHistory("COMMENTS","","","!Red: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show environment"
sub ShowEnv {
    print STDERR "    In ShowEnv: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        next if (/^\s*\^\s*$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        s/ +$//;    # Drop trailing ' '
        next if (/Fan Zone Speed:/);
        if (/(control temperature|monitor temperature)/i) {
            ProcessHistory("COMMENTS","","","!Env: $_");
            while (<$INPUT>) {
            if (/(.*\s+\d+\s+\d+\s+)(\d+)(.*$)/) {
                $_ = sprintf("%s%-". length($2)."s%s\n", $1, "", $3);
            }
            ProcessHistory("COMMENTS","","","!Env: $_");
            last if (/^\s*$/);
            }
            next;
        }
        ProcessHistory("COMMENTS","","","!Env: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show environment temperature"
sub ShowEnvTemp {
    print STDERR "    In ShowEnvTemp: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/No token match at /);    # 1000v
        return(-1) if (/\% Invalid command at /);
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        s/ +$//;    # Drop trailing ' '

        # Cut out CurTemp - drop the 2nd to last field.
        #--------------------------------------------------------------------
        #Module   Sensor        MajorThresh   MinorThres   CurTemp     Status
        #                       (Celsius)     (Celsius)    (Celsius)
        #5        Outlet1 (s1)    125             125         33         Ok
        #5        QEng1Sn1(s10)   115             105         39         Ok
        if (/(control temperature|monitor temperature)/i) {
            ProcessHistory("COMMENTS","","","!Env: $_");
            while (<INPUT>) {
                if (/(.*\s+\d+\s+\d+\s+)(\d+)(.*$)/) {
                    $_ = sprintf("%s%-". length($2)."s%s\n", $1, "", $3);
                }
                ProcessHistory("COMMENTS","","","!Env: $_");
                last if (/^\s*$/);
            }
            next;
        } else {
            next if (/INTAKE/);
            next if (/ASIC/);
            s/^(.+\s)(\S+\s+)(\S+\s*)$/$1$3/;
            s/ +$//;    # Drop trailing ' '
            ProcessHistory("COMMENTS","","","!Env: $_");
        }
    }

    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show environment power"
sub ShowEnvPower {
    print STDERR "    In ShowEnvPower: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        next if (/^\s*\^\s*$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        # Filter Actual Output/Draw.
        #Power                              Actual        Total
        #Supply    Model                    Output     Capacity    Status
        #                                 (Watts )     (Watts )
        #-------  -------------------  -----------  -----------  --------------
        #1        ------------                 0 W          0 W     Absent
        #3                                   749 W       5480 W     Ok
        #                                  Actual        Power
        #Module    Model                     Draw    Allocated    Status
        #                                 (Watts )     (Watts )
        #-------  -------------------  -----------  -----------  --------------
        #2        NURBURGRING                N/A          573 W    Powered-Up
        #fan1                                N/A          720 W    Powered-Up
        #
        # ELSE
        #
        # nexus# sh environment power
        # Power Supply:
        # Voltage: 12 Volts
        # Power                             Actual      Actual        Total
        # Supply    Model                   Output      Input      Capacity    Status
        #                                 (Watts )    (Watts )     (Watts )
        # -------  -------------------  ----------  ----------  ----------
        # --------------
        # 1        N9K-PAC-650W-B             65 W        76 W       649 W     Ok
        # 2        N9K-PAC-650W-B             70 W        84 W       649 W     Ok
        #
        #
        # Power Usage Summary:
        # --------------------
        # Power Supply redundancy mode (configured)                PS-Redundant
        # Power Supply redundancy mode (operational)               PS-Redundant
        #
        # Total Power Capacity (based on configured mode)             649.92 W
        # Total Grid-A (first half of PS slots) Power Capacity        649.92 W
        # Total Grid-B (second half of PS slots) Power Capacity       649.92 W
        # Total Power of all Inputs (cumulative)                     1299.84 W
        # Total Power Output (actual draw)                            136.00 W
        # Total Power Input (actual draw)                             161.00 W
        # Total Power Allocated (budget)                                N/A
        # Total Power Available for additional modules                  N/A
        #
        # nexus#
        if ( /(.* +)(\d+ W)( +\d+ W.*)/) {
            $_ = sprintf("%s%-". length($2)."s%s\n", $1, "", $3);
        } elsif ( /(.* +)(\d+ W)( +\d+ W.*)/) {
            $_ = sprintf("%s%-". length($2)."s%s\n", $1, "", $3);
        }

        /actual draw/ && next;  # Drop changing total power output.

        s/ +$//;    # Drop trailing ' '
        ProcessHistory("COMMENTS","","","!Env: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show boot"
sub ShowBoot {
    print STDERR "    In ShowBoot: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /^\s*\^\s*$/;
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if /Ambiguous command/i;
        return(-1) if (/\% Invalid command at /);
        return(-1) if (/No token match at /);   # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        s/ variable = / = /;
        ProcessHistory("COMMENTS","","","!Variable: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "dir /all ((disk|slot)N|bootflash|nvram):"
sub DirSlotN {
    print STDERR "    In DirSlotN: $_" if ($debug);

    my($dev) = (/\s([^\s]+):/);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /^\s*\^\s*$/;
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if /(No such device|Error Sending Request)/i;
        return(1) if /\%Error: No such file or directory/;
        return(1) if /No such file or directory/;
        return(1) if /No space information available/;
        return(1) if / is either not present or not formatted/;
        return(-1) if /\%Error calling/;
        return(-1) if /(: device being squeezed|ATA_Status time out)/i; # busy
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);
        return(1) if /(Open device \S+ failed|Error opening \S+:)/;

        # Drop ee.log
        /\s+ee\.log(?:\..*)?$/ && next;

        # Drop accounting.log
        /\s+accounting\.log$/ && next;

        next if (/BufferMonitor-1HourData/);
        if (/ log\/$/) {
            # change
            #         8192    Jan 08 14:05:05 2015  log/
            # to
            #                                       log/
            if (/(\s*\d+\s+)(\S+ \d+\s+\d+:\d+:\d+ \d+)(.*)/) {
            my($a, $dt, $rem) = ($1, $2, $3);
            my($dtl) = length($dt);
            my($fmt) = "%s%-". $dtl ."s%s\n";
            $_ = sprintf($fmt, $a, "", $rem);
            }
        }

        if (/^\s*(\d+) bytes /) {
            next if $dev eq 'logflash';
            my($tmp) = int($1 / (1024 * 1024));
            s/$1 bytes /$tmp MB /;
        }

        ProcessHistory("COMMENTS","","","!Flash: $dev: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show module".
sub ShowModule {
    print STDERR "    In ShowModule: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        return if (/^\s*\^$/);
        last if (/online diag status/i);
        last if (/^$prompt/);
        next if (/^\s*$cmd\s*$/);
        return(1) if (/\% Invalid command at /);
        return(1) if (/\% Invalid number at /);
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        s/(.*) \*$/$1/; # Drop a trailing '*'
        /^\* this terminal session/ && next;
        s/ +$//;    # Drop trailing ' '
        ProcessHistory("COMMENTS","","","!Mod: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");

    return(0);
}

# This routine parses "show inventory".
sub ShowInventory {
    print STDERR "    In ShowInventory: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        return if (/^\s*\^$/);
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(-1) if (/No token match at /);   # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        if (/^(NAME: "[^"]*",)\s+(DESCR: "[^"]+")/) {
            ProcessHistory("COMMENTS","","", sprintf("!%-30s %s\n", $1, $2));
            next;
        }
        # split PID/VID/SN line
        if (/^PID: (\S*)\s*,\s+VID: (\S*)\s*,\s+SN: (\S*)\s*$/) {
            my($entries) = "";
            $entries .= "!PID: $1\n" if ($1);
            $entries .= "!VID: $2\n" if ($2);
            $entries .= "!SN: $3\n" if ($3);
            ProcessHistory("COMMENTS","","", "$entries");
            next;
        }
        # split broken PID/VID/SN lines.
        if (/^PID: (\S*)\s*,\s+VID: (\S*)\s*$/) {
            my($entries) = "";
            $entries .= "!PID: $1\n" if ($1);
            $entries .= "!VID: $2\n" if ($2);
            <INPUT>;
            tr/\015//d;
            /^\s*,\s+SN: (\S*)\s*$/;
            $entries .= "!SN: $1\n" if ($1);
            ProcessHistory("COMMENTS","","", "$entries");
            next;
        }
        ProcessHistory("COMMENTS","","","!$_");
    }
    ProcessHistory("COMMENTS","","","!\n");

    return(0);
}

# This routine parses "show snmp engineID"
sub ShowEngineID {
    print STDERR "    In ShowEngineID: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /^\s*\^\s*$/;
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);
        next if (/^Configuration last modified by/);
        # the pager can not be disabled per-session on the PIX
        if (/^(<-+ More -+>)/) {
            my($len) = length($1);
            s/^$1\s{$len}//;
        }
        if (/Local\sSNMP\sengineID:\s\[Hex\]\s(.+)$/) {
                ProcessHistory("ENGINEID","","","!SNMP engineID: $1\n");
                $EngineId++;
                next;
        }
    }
    if ($EngineId) { ProcessHistory("ENGINEID","","","!\n"); }

    return(0);
}

# This routine parses "show vtp status"
sub ShowVTP {
    print STDERR "    In ShowVTP: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /^\s*\^\s*$/;
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);
        next if (/^Configuration last modified by/);
        # the pager can not be disabled per-session on the PIX
        if (/^(<-+ More -+>)/) {
            my($len) = length($1);
            s/^$1\s{$len}//;
        }

        if (/^VTP Operating Mode\s+:\s+(Transparent|Server)/) {
            $DO_SHOW_VLAN = 1;
        }
        ProcessHistory("COMMENTS","","","!VTP: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show interface"
sub ShowInterface {
    print STDERR "    In ShowInterface: $_" if ($debug);

    my $interface;

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /^\s*\^\s*$/;
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/\% Invalid command at /);
        return(-1) if (/No token match at /);   # 1000v
        return(1) if /Ambiguous command/i;
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);
        # the pager can not be disabled per-session on the PIX
        if (/^(<-+ More -+>)/) {
            my($len) = length($1);
            s/^$1\s{$len}//;
        }
        if (/^([\w\/\.\-]+) is ([\w\s]+)(?:\s\(.*\))?/) {
            ProcessHistory("INT","keysort",$interface->{'name'},"!Interface: " . PrintInterface($interface) . "\n") if (defined $interface);
            $interface = {
            name => $1,
            operState => $2,
            };
            # Trim trailing spaces
            $interface->{'operState'} =~ s/\s+$//;
            next;
        }
            if (/^admin state is ([\w\s]+),/) {
            $interface->{'adminState'} = $1;
                chomp($interface->{'adminState'});
                next;
            }
        if (/^\s+Description: (.+)/) {
            $interface->{'description'} = $1;
            chomp($interface->{'description'});
            next;
        }
        if (/^\s+Hardware is ([\w\s]+), address is ([0-9a-f\.]+)/) {
            $interface->{'type'} = $1;
            $interface->{'mac'} = $2;
            next;
        }
        if (/^\s+MTU (\d+) bytes/) {
            $interface->{'mtu'} = $1;
            next;
        }
    }
    ProcessHistory("INT","keysort",$interface->{'name'},"!Interface: " . PrintInterface($interface) . "\n") if (defined $interface);
    return(0);
}

sub PrintInterface {
    my $interface = shift;

    $interface->{'adminState'} = 'up' unless $interface->{'adminState'};

    my $toReturn = "$interface->{'name'} ($interface->{'adminState'}/$interface->{'operState'})";
    $toReturn .= ", Type: \"$interface->{'type'}\"" if (exists $interface->{'type'});
    $toReturn .= ", MTU: $interface->{'mtu'}" if (exists $interface->{'mtu'});
    $toReturn .= ", MAC: $interface->{'mac'}" if (exists $interface->{'mac'});
    $toReturn .= ", Description: \"$interface->{'description'}\"" if (exists $interface->{'description'});

    return $toReturn;
}

# This routine parses "show ip interface"
sub ShowIPInterface {
    print STDERR "    In ShowIPInterface: $_" if ($debug);

    my $interface;

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /^\s*\^\s*$/;
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(1) if /Ambiguous command/i;
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);
        # the pager can not be disabled per-session on the PIX
        if (/^(<-+ More -+>)/) {
            my($len) = length($1);
            s/^$1\s{$len}//;
        }
        if (/^([\w\/\.\-]+), Interface status:/) {
            $interface = $1;
            next;
        }
        if (/^\s+IP address: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/) {
            ProcessHistory("IP","ipsort",$1,"!IPv4 Address: $1 on $interface\n") if (defined $interface);
            next;
        }
    }
    return(0);
}

# This routine parses "show ipv6 interface"
sub ShowIPv6Interface {
    print STDERR "    In ShowIPv6Interface: $_" if ($debug);

    my $interface;

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /^\s*\^\s*$/;
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(1) if /Ambiguous command/i;
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);
        # the pager can not be disabled per-session on the PIX
        if (/^(<-+ More -+>)/) {
            my($len) = length($1);
            s/^$1\s{$len}//;
        }
        if (/^([\w\/\.\-]+), Interface status:/) {
            $interface = $1;
            next;
        }
        if (/^\s+IPv6 address:\s+([0-9a-f:]+)/) {
                ProcessHistory("IPv6","ipsort",$1,"!IPv6 Address: $1 on $interface\n") if (defined $interface);
        }
    }
    return(0);
}

# This routine parses "show hsrp"
sub ShowHSRP {
    print STDERR "    In ShowHSRP: $_" if ($debug);

    my $hsrp;

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /^\s*\^\s*$/;
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(1) if /Ambiguous command/i;
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);
        # the pager can not be disabled per-session on the PIX
        if (/^(<-+ More -+>)/) {
            my($len) = length($1);
            s/^$1\s{$len}//;
        }
        if (/^([\w\/\.]+) - Group (\d+)/) {
            ProcessHistory("INT","keysort",$standby->{'group'},"!HSRP: " . PrintHSRP ($hsrp) . " \n") if (defined $hsrp);
            $hsrp = {
                interface => $1,
                group => $2,
            };
        }
        if (/^  Local state is (\w+)/) {
            $hsrp->{'state'} = $1;
            next;
        }
        if (/^\s+Virtual IP address is (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/) {
            $hsrp->{'ip'} = $1;
            next;
        }
    }
    ProcessHistory("INT","keysort",$hsrp->{'group'},"!HSRP: " . PrintHSRP ($hsrp) . " \n") if (defined $hsrp);
    return(0);
}

sub PrintHSRP {
    my $hsrp = shift;

    my $toReturn = "$hsrp->{'interface'}, Group: $hsrp->{'group'}";
    $toReturn .= ", IP: $hsrp->{'ip'}" if (exists $hsrp->{'ip'});
    $toReturn .= ", State: $hsrp->{'state'}" if (exists $hsrp->{'state'});
    return $toReturn;
}

# This routine parses "show vlan"
sub ShowVLAN {
    print STDERR "    In ShowVLAN: $_" if ($debug);

    ($_ = <INPUT>, return(1)) if (!$DO_SHOW_VLAN);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /^\s*\^\s*$/;
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/\% Invalid command at /);
        return(1) if /Ambiguous command/i;
        # newer releases (~12.1(9)) place the vlan config in the normal
        # configuration (write term).
        return(1) if ($type =~ /^(3550|4500)$/);
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);
        # the pager can not be disabled per-session on the PIX
        if (/^(<-+ More -+>)/) {
            my($len) = length($1);
            s/^$1\s{$len}//;
        }

        ProcessHistory("COMMENTS","keysort","IO","!VLAN: $_");
    }
    ProcessHistory("COMMENTS","keysort","IO","!\n");
    return(0);
}

# This routine parses "show debug"
sub ShowDebug {
    print STDERR "    In ShowDebug: $_" if ($debug);
    my($lines) = 0;

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(-1) if (/\% Invalid command at /);
        return(-1) if (/No token match at /);   # 1000v
        return(-1) if (/command authorization failed/i);
        return(-1) if (/could not retrieve info/i);
        # XXX return(-1) if (/\% Permission denied/);
        # NX 5000 bug? "show debug" generates
        # "Permission denied" when using command authorization. -Per-Olof Olsson
        next if (/\% Permission denied/);

        /^No matching debug flags set$/ && next;
        /^No debug flags set$/ && next;
        ProcessHistory("COMMENTS","","","!DEBUG: $_");
        $lines++;
    }
    if ($lines) {
    ProcessHistory("COMMENTS","","","!\n");
    }
    return(0);
}

# This routine parses "show cores"
sub ShowCores {
    print STDERR "    In ShowCores: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if (/^\s*\^\s*$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/No token match at /);    # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        ProcessHistory("COMMENTS","","","!CORES: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show fex" and "show module fex"
sub ShowFex {
    print STDERR "    In ShowFex: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if (/^\s*\^\s*$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(1) if (/% Invalid number at /);  # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        ProcessHistory("COMMENTS","","","!FEX: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine parses "show processes log"
sub ShowProcLog {
    print STDERR "    In ShowProcLog: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        next if (/^(\s*|\s*$cmd\s*)$/);
        return(1) if /Line has invalid autocommand /;
        return(1) if /(Invalid input detected|Type help or )/;
        return(1) if (/\% Invalid command at /);
        return(-1) if (/No token match at /);   # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);

        ProcessHistory("COMMENTS","","","!PROC_LOGS: $_");
    }
    ProcessHistory("COMMENTS","","","!\n");
    return(0);
}

# This routine processes a "write term"
sub WriteTerm {
    print STDERR "    In WriteTerm: $_" if ($debug);
    my($lineauto,$comment,$linecnt) = (0,0,0);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        return(1) if /Line has invalid autocommand /;
        return(1) if (/(Invalid input detected|Type help or )/i);
        return(-1) if (/\% Invalid command at /);
        return(-1) if (/No token match at /);   # 1000v
        return(-1) if (/\% Permission denied/);
        return(-1) if (/command authorization failed/i);
        return(0) if ($found_end);      # Only do this routine once

        $linecnt++;
        $lineauto = 0 if (/^[^ ]/);

        # Dog gone Cool matches to process the rest of the config
        /^!Command: show running-config/ && next; # kill this junk
        /^!Time: / && next; # kill this junk

        # Sort username and delete passwords.
        if (/^username (\S+) password (\d) (\S+)(\s.*)$/) {
            if ($filter_pwds >= 2) {
            ProcessHistory("USER","keysort","$1",
                       "!username $1 password <removed>$4\n");
            } elsif ($filter_pwds >= 1 && $2 ne "5") {
            ProcessHistory("USER","keysort","$1",
                       "!username $1 password <removed>$4\n");
            } else {
            ProcessHistory("USER","keysort","$1","$_");
            }
            next;
        }
        # Sort any other username info.
        /^username (\S+) .*$/ &&
            ProcessHistory("USER","keysort","$1","$_") && next;
        if (/^\s*(.*?neighbor \S*) password / && $filter_pwds >= 1) {
            ProcessHistory("","","","! $1 password <removed>\n");
            next;
        }
        # Why was this commented out? It shows up in the raw text...
        if (/^(snmp-server community) (\S+)/) {
            if ($filter_commstr) {
            ProcessHistory("SNMPSERVERCOMM","keysort","$_",
                       "!$1 <removed>$'") && next;
            } else {
            ProcessHistory("SNMPSERVERCOMM","keysort","$_","$_") && next;
            }
        }

        # Sort snmp user and delete passwords.
        if (/^snmp-server user (\S+) (\S+) auth md5 (\S+) priv (\S+) localizedkey$/) {
            if ($filter_pwds >= 2) {
            ProcessHistory("SNMP-USER","keysort","$1",
                       "!snmp-server user $1 $2 auth md5 <removed> priv <removed> localizedkey\n");
            } else {
            ProcessHistory("SNMP-USER","keysort","$1","$_");
            }
            next;
        }
        # Sort any other snmp user info.
        /^snmp-server user (\S+) .*$/ &&
            ProcessHistory("SNMP-USER","keysort","$1","$_") && next;
        # Delete bgp passwords.
        if (/^(\s*)password (\d) (\S+)(\s.*)?$/) {
            if ($filter_pwds >= 2) {
            ProcessHistory("","","","!$1password <removed>$4");
            } elsif ($filter_pwds >= 1 && $2 ne "5") {
            ProcessHistory("","","","!$1password <removed>$4");
            } else {
            ProcessHistory("","","","$_");
            }
            next;
        }

        # prune tacacs/radius server keys:
        # tacacs-server host 196.23.0.13 key 7 "xxxxxxx" port 50 timeout 10
        if (/^((tacacs|radius)-server.*?\bkey\b.*?) ".*?"(.*)/
            && $filter_pwds >= 1) {
            ProcessHistory("","","","!$1 <removed>$3\n"); next;
        }

        # order cli alias names
        /^cli alias name (\S+) .*$/ &&
            ProcessHistory("CLI-ALIAS","keysort","$1","$_") && next;
        # order snmp-server enable trap statements
        /^snmp-server enable traps (.*)$/ &&
            ProcessHistory("SNMP-TRAPS","keysort","$1","$_") && next;

        # catch anything that wasnt matched above.
        ProcessHistory("","","","$_");
        # end of config.  the ": " game is for the PIX
        if (/^(: +)?end$/) {
            $found_end = 1;
            return(0);
        }
    }
    # The ContentEngine lacks a definitive "end of config" marker.  If we
    # know that it is NXOS and we have seen at least 5 lines
    # of write term output, we can be reasonably sure that we got the config.
    if (($type eq "NXOS") && $linecnt > 5) {
        $found_end = 1;
        return(0);
    }

    return(0);
}

# This routine parses a single command that returns no required info.
sub RunCommand {
    print STDERR "    In RunCommand: $_" if ($debug);

    while (<INPUT>) {
        tr/\015//d;
        last if (/^$prompt/);
        return(1) if /Line has invalid autocommand /;
        return(1) if (/(Invalid input detected|Type help or )/i);
    }
    return(0);
}

# dummy function
sub DoNothing {print STDOUT;}

##############################
# add these:
# show version module X - wait until can show all
# show version module X epld - wait until can show all
##############################

# Main
@commandtable = (
    {'term no monitor-force'    => 'RunCommand'},
    {'show version'         => 'ShowVersion'},
    {'show version build-info all'  => 'ShowVersionBuild'},
    {'show license'         => 'ShowLicense'},
    {'show license usage'       => 'ShowLicense'},
    {'show license host-id'     => 'ShowLicense'},
    {'show system redundancy status' => 'ShowRedundancy'},
    {'show environment clock'   => 'ShowEnv'},
    {'show environment fan'     => 'ShowEnv'},
    {'show environment fex all fan' => 'ShowEnv'},
    {'show environment temperature' => 'ShowEnvTemp'},
    {'show environment power'   => 'ShowEnvPower'},
    {'show boot'            => 'ShowBoot'},
    {'dir bootflash:'       => 'DirSlotN'},
    {'dir debug:'           => 'DirSlotN'},
    {'dir logflash:'        => 'DirSlotN'},
    {'dir slot0:'           => 'DirSlotN'},
    {'dir usb1:'            => 'DirSlotN'},
    {'dir usb2:'            => 'DirSlotN'},
    {'dir volatile:'        => 'DirSlotN'},
    {'show module'          => 'ShowModule'},
    {'show module xbar'     => 'ShowModule'},
    {'show inventory'       => 'ShowInventory'},
    {'show snmp engineID'   => 'ShowEngineID'},
    {'show vtp status'      => 'ShowVTP'},
    {'show vlan'            => 'ShowVLAN'},
    {'show hsrp'            => 'ShowHSRP'},
    {'show interface'       => 'ShowInterface'},
    {'show ip interface'        => 'ShowIPInterface'},
    {'show ipv6 interface'      => 'ShowIPv6Interface'},
    {'show debug'           => 'ShowDebug'},
    {'show cores vdc-all'       => 'ShowCores'},
    {'show processes log vdc-all'   => 'ShowProcLog'},
    {'show module fex'  => 'ShowFex'},
    {'show fex'         => 'ShowFex'},
    {'show running-config'  => 'WriteTerm'},
);
# Use an array to preserve the order of the commands and a hash for mapping
# commands to the subroutine and track commands that have been completed.
@commands = map(keys(%$_), @commandtable);
%commands = map(%$_, @commandtable);

$cisco_cmds = join(";",@commands);
$cmds_regexp = join("|", map quotemeta($_), @commands);

if (length($host) == 0) {
    if ($file) {
    print(STDERR "Too few arguments: file name required\n");
    exit(1);
    } else {
    print(STDERR "Too few arguments: host name required\n");
    exit(1);
    }
}
open(OUTPUT,">$host.new") || die "Can't open $host.new for writing: $!\n";
select(OUTPUT);
# make OUTPUT unbuffered if debugging
if ($debug) { $| = 1; }

if ($file) {
    print STDERR "opening file $host\n" if ($debug);
    print STDOUT "opening file $host\n" if ($log);
    open(INPUT,"<$host") || die "open failed for $host: $!\n";
} else {
    print STDERR "executing clogin -t $timeo -c\"$cisco_cmds\" $host\n" if ($debug);
    print STDOUT "executing clogin -t $timeo -c\"$cisco_cmds\" $host\n" if ($log);
    if (defined($ENV{NOPIPE}) && $ENV{NOPIPE} =~ /^YES/i) {
    system "clogin -t $timeo -c \"$cisco_cmds\" $host </dev/null > $host.raw 2>&1" || die "clogin failed for $host: $!\n";
    open(INPUT, "< $host.raw") || die "clogin failed for $host: $!\n";
    } else {
    open(INPUT,"clogin -t $timeo -c \"$cisco_cmds\" $host </dev/null |") || die "clogin failed for $host: $!\n";
    }
}

# determine ACL sorting mode
if ($ENV{"ACLSORT"} =~ /no/i) {
    $aclsort = "";
}
# determine community string filtering mode
if (defined($ENV{"NOCOMMSTR"}) &&
    ($ENV{"NOCOMMSTR"} =~ /yes/i || $ENV{"NOCOMMSTR"} =~ /^$/)) {
    $filter_commstr = 1;
} else {
    $filter_commstr = 0;
}
# determine password filtering mode
if ($ENV{"FILTER_PWDS"} =~ /no/i) {
    $filter_pwds = 0;
} elsif ($ENV{"FILTER_PWDS"} =~ /all/i) {
    $filter_pwds = 2;
} else {
    $filter_pwds = 1;
}

ProcessHistory("","","","!RANCID-CONTENT-TYPE: cisco-nx\n!\n");
TOP: while(<INPUT>) {
    tr/\015//d;

    if (/[>#]\s?exit$/) {
    print STDERR ("$host: found exit\n") if ($debug);
    $clean_run = 1;
    last;
    }
    if (/^Error:/) {
    print STDOUT ("$host clogin error: $_");
    print STDERR ("$host clogin error: $_") if ($debug);
    $clean_run = 0;
    last;
    }
    while (/#\s*($cmds_regexp)\s*$/) {
    $cmd = $1;
    if (!defined($prompt)) {
        $prompt = ($_ =~ /^([^#]+#)/)[0];
        $prompt =~ s/([][}{)(\\])/\\$1/g;
        print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
    }
    print STDERR ("HIT COMMAND:$_") if ($debug);
    if (! defined($commands{$cmd})) {
        print STDERR "$host: found unexpected command - \"$cmd\"\n";
        $clean_run = 0;
        last TOP;
    }
    $rval = &{$commands{$cmd}};
    delete($commands{$cmd});
    if ($rval == -1) {
        $clean_run = 0;
        print STDERR ("$host: $cmd failed: $rval\n") if ($debug);
        last TOP;
    }
    if (/[>#]\s?exit$/) {
        print STDERR ("$host: found exit\n") if ($debug);
        $clean_run = 1;
        last TOP;
    }
    }
}
print STDOUT "Done $logincmd: $_\n" if ($log);
# Flush History
ProcessHistory("","","","");
# Cleanup
close(INPUT);
close(OUTPUT);

if (defined($ENV{NOPIPE}) && $ENV{NOPIPE} =~ /^YES/i) {
    unlink("$host.raw") if (! $debug);
}

# check for completeness
if (scalar(%commands) || !$clean_run || !$found_end) {
    if (scalar(%commands)) {
    printf(STDOUT "$host: missed cmd(s): %s\n", join(',', keys(%commands)));
    printf(STDERR "$host: missed cmd(s): %s\n", join(',', keys(%commands))) if ($debug);
    }
    if (!$clean_run || !$found_end) {
    print STDOUT "$host: End of run not found\n";
    print STDERR "$host: End of run not found\n" if ($debug);
    print STDERR "$host: clean: $clean_run, end: $found_end\n" if ($debug);
    system("/usr/bin/tail -1 $host.new");
    }
    unlink "$host.new" if (! $debug);
}
