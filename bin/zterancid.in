#! @PERLV_PATH@
##
## $Id:
##
## @PACKAGE@ @VERSION@
## Copyright (c) @COPYYEARS@ by Terrapin Communications, Inc.
## All rights reserved.
##
## This software may be freely copied, modified and redistributed
## without fee for non-commerical purposes provided that this license
## remains intact and unmodified with any RANCID distribution.
##
## There is no warranty or other guarantee of fitness of this software.
## It is provided solely "as is".  The author(s) disclaim(s) all
## responsibility and liability with respect to this software's usage
## or its effect upon hardware, computer systems, other software, or
## anything else.
##
## Except where noted otherwise, rancid was written by and is maintained by
## Henry Kilmer, John Heasley, Andrew Partan, Pete Whiting, and Austin Schutz.
##
# zterancid - ZTE ethernet switches by Alexandru Musat <manyax@manyax.net>
#
# Modified from zyrancid for use with ZTE 1/9/2016
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
# usage: zterancid [-d] [-l] [-f filename | $host]
#
use Getopt::Std;
getopts('dfl');
$log = $opt_l;
$debug = $opt_d;
$file = $opt_f;
$host = $ARGV[0];
$clean_run = 0;
$found_end = 0;
$found_version = 0;
$found_env = 0;
$found_diag = 0;
$timeo = 90;            # clogin timeout in seconds
$clogin_pgm= $ENV{'RANCID_CLOGIN'} || "ztelogin";
$prompt = '.*>';
delete $ENV{'TERM'};

my(%filter_pwds);       # password filtering mode

# This routine is used to print out the router configuration
sub ProcessHistory {
    my($new_hist_tag,$new_command,$command_string,@string)=(@_);
    if((($new_hist_tag ne $hist_tag) || ($new_command ne $command)) && %history) {
    print eval "$command \%history";
    undef %history;
    }
    if (($new_hist_tag) && ($new_command) && ($command_string)) {
    if ($history{$command_string}) {
        $history{$command_string} = "$history{$command_string}@string";
    } else {
        $history{$command_string} = "@string";
    }
    } elsif (($new_hist_tag) && ($new_command)) {
    $history{++$#history} = "@string";
    } else {
    print "@string";
    }
    $hist_tag = $new_hist_tag;
    $command = $new_command;
    1;
}

sub numerically { $a <=> $b; }

# This is a sort routing that will sort numerically on the
# keys of a hash as if it were a normal array.
sub keynsort {
    local(%lines)=@_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort numerically keys(%lines)) {
    $sorted_lines[$i] = $lines{$key};
    $i++;
    }
    @sorted_lines;
}

# This is a sort routing that will sort on the
# keys of a hash as if it were a normal array.
sub keysort {
    local(%lines)=@_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort keys(%lines)) {
    $sorted_lines[$i] = $lines{$key};
    $i++;
    }
    @sorted_lines;
}

# This is a sort routing that will sort on the
# values of a hash as if it were a normal array.
sub valsort{
    local(%lines)=@_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort values %lines) {
    $sorted_lines[$i] = $key;
    $i++;
    }
    @sorted_lines;
}

# This is a numerical sort routing (ascending).
sub numsort {
    local(%lines)=@_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $num (sort {$a <=> $b} keys %lines) {
    $sorted_lines[$i] = $lines{$num};
    $i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# ip address when the ip address is anywhere in
# the strings.
sub ipsort {
    local(%lines)=@_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $addr (sort sortbyipaddr keys %lines) {
    $sorted_lines[$i] = $lines{$addr};
    $i++;
    }
    @sorted_lines;
}

# These two routines will sort based upon IP addresses
sub ipaddrval {
    my(@a) = ($_[0] =~ m#^(\d+)\.(\d+)\.(\d+)\.(\d+)$#);
    $a[3]+256*($a[2]+256*($a[1]+256*$a[0]));
}
sub sortbyipaddr {
    &ipaddrval($a) <=> &ipaddrval($b);
}

# This routine parses "show system-information"
sub ShowVersion {
    print STDERR "    In ShowVersion: $_" if ($debug);
    ProcessHistory("COMMENTS","keysort","A1","\n! # $cmd\n");

    while (<INPUT>) {
    tr/\015//d;
    s/\x1b\x37//g;	# ANSI escape code: Save Cursor Position
    if (/^$prompt/) { $found_version=1; last};
    next if(/^(\s*|\s*$cmd\s*)$/);
    return(1) if (/\s+\%  Command not found \".*\"/);
    return(0) if ($found_version);      # Only do this routine once

    # in case the pager prompt shows up
    s/^----- more -----.*ESC//;

    # ignore "System up Time" value
    s/^(    System uptime\s+is\s).*$/$1[removed]/;
    s/^(    Onboard temperature\s+:\s).*$/$1[removed]/;
    ProcessHistory("COMMENTS","keysort","A1","! $_");
    }

    return(0);
}

sub ShowMisc { # keyval
    my $keyval= $_[0] or "C1";
    print STDERR "    In ShowMisc($keyval): $_" if ($debug);
    ProcessHistory("COMMENTS","keysort",$keyval,"\n! # $cmd\n");

    while (<INPUT>) {
    tr/\015//d;
    s/\x1b\x37//g;	# ANSI escape code: Save Cursor Position
    if (/^$prompt/) { $found_version=1; last};
    next if(/^(\s*|\s*$cmd\s*)$/);
    return(1) if (/\s+\%  Command not found \".*\"/);

    # in case the pager prompt shows up
    s/^----- more -----.*ESC//;

    ProcessHistory("COMMENTS","keysort",$keyval,"! $_");
    }

    return(0);
}

sub ShowFan         { ShowMisc("B1"); }
sub ShowAuth        { ShowMisc("C1"); }
sub ShowLogins      { ShowMisc("D1"); }
sub ShowSNMP        { ShowMisc("E1"); }
sub ShowRadius      { ShowMisc("F1"); }
sub ShowRemoteAcc   { ShowMisc("G1"); }

sub ShowConfig {
    print STDERR "    In ShowConfig: $_" if ($debug);
    ProcessHistory("COMMENTS","","","\n! # $cmd\n");

    while (<INPUT>) {
    tr/\015//d;
    s/\x1b\x37//g;	# ANSI escape code: Save Cursor Position
    if (/^$prompt/) { $found_end=1; $clean_run=1; return 0};
    next if(/^(\s*|\s*$cmd\s*)$/);
    return(1) if (/\s+\%  Command not found \".*\"/);


    # in case the pager prompt shows up
    s/^----- more -----.*ESC//;

    ProcessHistory("","","","$_");
    }
}

# dummy function
sub DoNothing {print STDOUT;}

# Main
@commandtable=(
    {'show version'             => "ShowVersion"},
    {'show fan'         	=> "ShowFan"},
    {'show loginauth'           => "ShowAuth"},
    {'show user'                => "ShowLogins"},
    {'show snmp'                => "ShowSNMP"},
    {'show radius'              => "ShowRadius"},
    {'show remote-access'       => "ShowRemoteAcc"},
    {'show running-config'      => "ShowConfig"},
);

# Use array to preserve order of commands, and hash for mapping to subroutine
my (%commands, @commands);
foreach (@commandtable) {
    push @commands, (keys(%{$_}))[0];
    $commands{$commands[$#commands]}= (values(%{$_}))[0];
};

$clogin_cmds=join(";", @commands);
$cmds_regexp=join("|", @commands);

open(OUTPUT,">$host.new") || die "Can't open $host.new for writing: $!\n";
select(OUTPUT);
# make OUTPUT unbuffered if debugging
if ($debug) { $| = 1; }

if ($file) {
    print STDERR "opening file $host\n" if ($debug);
    print STDOUT "opening file $host\n" if ($log);
    open(INPUT,"<$host") || die "open failed for $host: $!\n";
} else {
    print STDERR "executing $clogin_pgm -t $timeo -c\"$clogin_cmds\" $host\n" if ($debug);
    print STDOUT "executing $clogin_pgm -t $timeo -c\"$clogin_cmds\" $host\n" if ($log);
    if (defined($ENV{NOPIPE})) {
    system "$clogin_pgm -t $timeo -c \"$clogin_cmds\" $host </dev/null > $host.raw 2>&1" || die "$clogin_pgm failed for $host: $!\n";
    open(INPUT, "< $host.raw") || die "$clogin_pgm failed for $host: $!\n";
    } else {
    open(INPUT,"$clogin_pgm -t $timeo -c \"$clogin_cmds\" $host </dev/null |") || die "$clogin_pgm failed for $host: $!\n";
    }
}

ProcessHistory("","","","!RANCID-CONTENT-TYPE: ZTE\n!\n");

TOP: while(<INPUT>) {
    tr/\015//d;
    s/\x1b\x37//g;	# ANSI escape code: Save Cursor Position

    # ZyXel logouts get you EPIPE, it's not an error (probably)
    if (/^(($prompt)exit|Write failed: Broken pipe)$/) { 
        $clean_run=1;
        last;
    }
    # clogin sends cisco commands the ZyXel complains of - just ignore these
    next if (/\s+\%Invalid command \".*\"/);

    while (/($prompt)\s*($cmds_regexp)/) {
    $cmd = $2;
    if (!defined($actual_prompt)) {
        $actual_prompt = ($_ =~ /^([^>]+>)/)[0];
        $actual_prompt =~ s/([][+.*}{)(\\])/\\$1/g;
        print STDERR ("PROMPT MATCH: $actual_prompt\n") if ($debug);
        $prompt = $actual_prompt;
    }
    print STDERR ("HIT COMMAND:$_") if ($debug);
    if (! defined($commands{$cmd})) {
        print STDERR "$host: found unexpected command - \"$cmd\"\n";
        $clean_run = 0;
        last TOP;
    }
    $rval = &{$commands{$cmd}};
    delete($commands{$cmd});
    if ($rval == -1) {
        $clean_run = 0;
        last TOP;
    }
    }
}

print STDOUT "Done $clogin_pgm: $_\n" if ($log);
# Flush History
ProcessHistory("","","","");
# Cleanup
close(INPUT);
close(OUTPUT);

if (defined($ENV{NOPIPE})) {
    unlink("$host.raw") if (! $debug);
}

# check for completeness
if (scalar(%commands) || !$clean_run || !$found_end) {
    if (scalar(%commands)) {
    printf(STDOUT "$host: missed cmd(s): %s\n", join(',', keys(%commands)));
    printf(STDERR "$host: missed cmd(s): %s\n", join(',', keys(%commands))) if ($debug);
    }
    if (!$clean_run || !$found_end) {
    print STDOUT "$host: End of run not found\n";
    print STDERR "$host: End of run not found\n" if ($debug);
    system("/usr/bin/tail -1 $host.new");
    }
    unlink "$host.new" if (! $debug);
}
